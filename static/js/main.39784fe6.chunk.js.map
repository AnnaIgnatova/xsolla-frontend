{"version":3,"sources":["components/select/Cities.js","components/select/Monthes.js","components/cards/Cards.js","App.js","reportWebVitals.js","index.js"],"names":["Cities","props","this","cities","sort","filter","city","index","arr","lastIndexOf","map","value","e","updateCity","target","onChange","changeCity","className","createSelectOptions","React","Component","Monthes","monthes","month","Date","UTC","toLocaleDateString","updateMonth","changeMonth","createMonthesOptions","NOT_FILLED","FILLED","Cards","saveCard","targetElement","targetParentId","baseVal","children","parentNode","id","updateSaved","date","name","img","saveType","day","split","savedCards","forEach","obj","style","backgroundImage","onClick","viewBox","fill","xmlns","d","stroke","strokeWidth","events","event","eventMonth","String","createCard","image","createAllCards","SAVED_ITEM","App","fetchEvents","setState","state","fetch","then","response","json","result","catch","console","log","savedArr","saved","isFound","push","localStorage","setItem","JSON","stringify","getDataFromLocalStorage","parse","getItem","getCities","getMonthes","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.39784fe6.chunk.js","sourcesContent":["import React from 'react';\r\nimport './select.css';\r\n\r\nclass Cities extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  createSelectOptions() {\r\n    let filterCities = this.props.cities\r\n      .sort()\r\n      .filter((city, index, arr) => arr.lastIndexOf(city) === index);\r\n\r\n    return filterCities.map((city, index) => {\r\n      return (\r\n        <option value={city} key={`${city}-${index}`}>\r\n          {city}\r\n        </option>\r\n      );\r\n    });\r\n  }\r\n\r\n  changeCity(e) {\r\n    this.props.updateCity(e.target.value);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <select onChange={(e) => this.changeCity(e)} className=\"select-city\">\r\n        {this.createSelectOptions()}\r\n      </select>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Cities;\r\n","import React from 'react';\r\nimport './select.css';\r\n\r\nclass Monthes extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  createMonthesOptions() {\r\n    let filterMonthes = this.props.monthes\r\n      .sort()\r\n      .filter((month, index, arr) => arr.lastIndexOf(month) === index);\r\n\r\n    let transformedMonthes = filterMonthes.map((month) => {\r\n      let date = new Date(Date.UTC(2021, month - 1, 10));\r\n      return date.toLocaleDateString('en-US', {\r\n        month: 'long',\r\n      });\r\n    });\r\n\r\n    return transformedMonthes.map((month) => {\r\n      return <option value={month} key={month}>{month}</option>;\r\n    });\r\n  }\r\n\r\n  changeMonth(e) {\r\n    this.props.updateMonth(e.target.value);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <select onChange={(e) => this.changeMonth(e)}>\r\n        {this.createMonthesOptions()}\r\n      </select>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Monthes;\r\n","import React from 'react';\r\nimport './cards.css';\r\n\r\nconst NOT_FILLED = 'no-fill';\r\nconst SAVE_ICON = 'event-save-icon';\r\nconst FILLED = 'active';\r\n\r\nclass Cards extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  saveCard = (e) => {\r\n    let targetElement;\r\n    let targetParentId;\r\n\r\n    if (e.target.className.baseVal === SAVE_ICON) {\r\n      targetElement = e.target.children[0].className.baseVal;\r\n      targetParentId = e.target.parentNode.id;\r\n    } else {\r\n      targetElement = e.target.className.baseVal;\r\n      targetParentId = e.target.parentNode.parentNode.id;\r\n    }\r\n\r\n    if (targetElement === NOT_FILLED || targetElement === 'undefined') {\r\n      targetElement = FILLED;\r\n      this.props.updateSaved(targetParentId, FILLED);\r\n    } else {\r\n      targetElement = NOT_FILLED;\r\n      this.props.updateSaved(targetParentId, NOT_FILLED);\r\n    }\r\n  };\r\n\r\n  createCard(id, date, name, img) {\r\n    let day = date.split('.')[0];\r\n    let saveType;\r\n\r\n    this.props.savedCards.forEach((obj) => {\r\n      if (obj.id === id) {\r\n        saveType = obj.value;\r\n      }\r\n    });\r\n\r\n    return (\r\n      <div\r\n        className=\"card-event\"\r\n        style={{ backgroundImage: `url(${img})` }}\r\n        key={id}\r\n        id={id}\r\n      >\r\n        <div className=\"event-month\">{day}</div>\r\n        <span>{name}</span>\r\n        <svg\r\n          onClick={this.saveCard}\r\n          viewBox=\"0 0 16 20\"\r\n          fill=\"none\"\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          className=\"event-save-icon\"\r\n        >\r\n          <path\r\n            className={`${saveType}`}\r\n            d=\"M15 19L8 14L1 19V3C1 2.46957 1.21071 1.96086 1.58579 1.58579C1.96086 1.21071 2.46957 1 3 1H13C13.5304 1 14.0391 1.21071 14.4142 1.58579C14.7893 1.96086 15 2.46957 15 3V19Z\"\r\n            stroke=\"white\"\r\n            strokeWidth=\"2\"\r\n          />\r\n        </svg>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  createAllCards(city, month) {\r\n    return this.props.events.map((event) => {\r\n      let date = new Date(\r\n        Date.UTC(2021, +String(event.date).split('.')[1] - 1, 10)\r\n      );\r\n      let eventMonth = date.toLocaleDateString('en-US', {\r\n        month: 'long',\r\n      });\r\n      if (event.city === city && month === eventMonth) {\r\n        return this.createCard(event.id, event.date, event.name, event.image);\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"cards-container\">\r\n        {this.createAllCards(this.props.city, this.props.month)}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Cards;\r\n","import './App.css';\nimport React from 'react';\nimport Cities from './components/select/Cities.js';\nimport Monthes from './components/select/Monthes';\nimport Cards from './components/cards/Cards';\n\nconst SAVED_ITEM = 'saved';\nconst DEFAULT_CITY = 'Amsterdam';\nconst DEFAULT_MONTH = 'February';\n\nconst requestURL =\n  'https://raw.githubusercontent.com/xsolla/xsolla-frontend-school-2021/main/events.json';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      events: [],\n      city: DEFAULT_CITY,\n      month: DEFAULT_MONTH,\n      saved: JSON.parse(localStorage.getItem(SAVED_ITEM))\n        ? JSON.parse(localStorage.getItem(SAVED_ITEM))\n        : [],\n    };\n  }\n\n  fetchEvents = () => {\n    this.setState({ ...this.state });\n    fetch(requestURL)\n      .then((response) => response.json())\n      .then((result) => this.setState({ events: result }))\n      .catch((e) => console.log(e));\n  };\n\n  componentDidMount() {\n    this.fetchEvents();\n  }\n\n  getCities() {\n    return this.state.events.map((event) => event.city);\n  }\n  getMonthes() {\n    return this.state.events.map((event) => {\n      return String(event.date).split('.')[1];\n    });\n  }\n\n  updateMonth = (month) => {\n    this.setState({ month: month });\n  };\n\n  updateCity = (city) => {\n    this.setState({ city: city });\n  };\n\n  updateSaved = (id, value) => {\n    let savedArr = [...this.state.saved];\n    let isFound = false;\n    savedArr.forEach((obj) => {\n      if (obj.id === id) {\n        obj.value = value;\n        isFound = true;\n      }\n    });\n\n    if (!isFound) savedArr.push({ id, value });\n\n    this.setState({ saved: savedArr });\n    localStorage.setItem(SAVED_ITEM, JSON.stringify(savedArr));\n  };\n\n  getDataFromLocalStorage = () => {\n    if (JSON.parse(localStorage.getItem(SAVED_ITEM))) {\n      this.setState({ saved: JSON.parse(localStorage.getItem(SAVED_ITEM)) });\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"app\">\n        <div className=\"events-container\">\n          <h1>Event Listing</h1>\n          <div className=\"event-info\">\n            <span className=\"city-title\">City:</span>\n            <Cities cities={this.getCities()} updateCity={this.updateCity} />\n            <span>Month:</span>\n            <Monthes\n              monthes={this.getMonthes()}\n              updateMonth={this.updateMonth}\n            />\n          </div>\n          <Cards\n            events={this.state.events}\n            city={this.state.city}\n            month={this.state.month}\n            updateSaved={this.updateSaved}\n            savedCards={this.state.saved}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}